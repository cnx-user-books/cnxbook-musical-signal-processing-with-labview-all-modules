<document xmlns="http://cnx.rice.edu/cnxml" xmlns:md="http://cnx.rice.edu/mdml">
  <title>[ mini-project ] Risset Bell Synthesis</title>
  <metadata><md:content-id>undefined</md:content-id><md:title/><md:uuid>b9b40d69-4624-4dff-a508-e40b7f09a15d</md:uuid>
</metadata>

<content>

<table frame="none" id="labview_banner" summary=""><tgroup cols="2">
<colspec rowsep="0" colsep="0"/> <colspec colwidth="6in" rowsep="0" colsep="0"/>
<tbody>
  <row>
    <entry morerows="3"><media id="idm2985936" alt=""><image src="../../media/LabVIEWq.png" mime-type="image/png"/></media></entry>
    <entry> This module refers to LabVIEW, a software development environment that features a graphical programming language.
       Please see the <link document="m15428">LabVIEW QuickStart Guide</link> module for tutorials and documentation that will help you:</entry>
  </row>
  <row> <entry>• Apply LabVIEW to Audio Signal Processing </entry> </row>
  <row> <entry>• Get started with LabVIEW</entry> </row>
  <row> <entry>• Obtain a fully-functional evaluation edition of LabVIEW</entry> </row>
</tbody>
</tgroup>
</table>


<section id="sec1">
<title>Objective</title>

<para id="par2">
Additive synthesis builds up complex sounds from simple sounds (sinusoids). Additive synthesis implies more than just doing Fourier series, though: each sinusoidal component is assigned its own frequency and amplitude trajectory (resulting in a partial), so complex, time-varying sounds can be generated by summing these partials together.</para>

<para id="par3">
In this project, use additive synthesis to emulate the sound of a bell using a technique described by Jean-Claude Risset, an early pioneer in <term>computer music</term>.		
</para>

</section>

<section id="sec4">
<title>Prerequisite Modules</title>

<para id="par5">
If you have not done so already, please study the pre-requisite modules 
<link document="m15444">Additive Synthesis Concepts</link> and
<link document="m15445">Additive Synthesis Techniques</link>.
If you are relatively new to LabVIEW, consider taking the course <link document="col10440">LabVIEW Techniques for Audio Signal Processing</link>  which provides the foundation you need to complete this mini-project activity, including working with arrays, creating subVIs, playing an array to the soundcard, and saving an array as a .wav sound file.
</para>

</section>

<section id="sec6">
<title>Deliverables</title>

<list id="list7" list-type="bulleted">

<item> All LabVIEW code that you develop (block diagrams and front panels) </item>
<item> All generated sounds in .wav format </item>
<item> Any plots or diagrams requested </item>
<item> Summary write-up of your results </item>

</list>

</section>

<section id="sec8">
<title>Description of the Risset Bell</title>

<para id="par9">
Jean-Claude Risset's book <cite><cite-title>Introductory Catalogue of Computer-Synthesized Sounds (Bell Telephone Laboratories, 1969)</cite-title></cite> includes an additive synthesis method for a bell-like sound. After analyzing the ringing characteristics of physical bells, he determined that a bell-like tone could be created by using non-harmonic partials whose decay times are approximately inversely proportional to frequency. In addition, pairs of low-frequency partials with a slight frequency offset create a "beating" effect.		
</para>

<para id="par10">
The partials for the Risset bell are available in this CSV-type spreadsheet: <link resource="risset_bell.csv">risset_bell.csv</link>. The columns are:
</para>

<list id="list11" list-type="enumerated">

<item> partial number </item>
<item> intensity in dB </item>
<item> duration multiplier (indicates fraction of overall duration) </item>
<item> frequency multiplier (indicates interval ratio from base frequency) </item>
<item> frequency offset (in Hz) </item>

</list>

</section>

<section id="sec12">
<title>Part 1: Attack/Decay Envelope Generator</title>

<para id="par13">
Create an attack/decay intensity envelope composed of two straight-line segments as shown in <link target-id="fig-ADenv"/>:</para>

<figure id="fig-ADenv">
<media id="idm9974688" alt=""><image src="../../media/add_MP-bell-ADenv.png" mime-type="image/png"/></media>
<caption>
   Attack/decay envelope specification
</caption>
</figure>

<para id="par15">
		The value "-60 dB" corresponds to an amplitude of 0.001, effectively silence. The total duration of the envelope should be based on a 
		front-panel control called "duration [s]" (its unit is seconds), and another control called "attack [ms]" 
		(its unit is milliseconds).</para>

<para id="par16">Convert the intensity envelope into an amplitude envelope by "undoing" the equation for decibels.
</para>

</section>

<section id="sec17">
<title>Part 2: Multiple Envelopes</title>

<para id="par18">
Enclose your envelope generator in a for-loop structure which takes values from <link resource="risset_bell.csv">risset_bell.csv</link>. Connect a control to the count terminal so that you can adjust how many envelopes to view.</para>

<para id="par19">Use "auto indexing" on the for-loop to create an array of envelopes, then view the array as graph (you will see all of the envelopes superimposed on the same graph, with each envelope a different color). Confirm that your envelopes have the correct amplitudes and durations.</para>

<para id="par20">Plot both the intensity envelopes and amplitude envelopes for all partials, and include these plots with your deliverables.
</para>

</section>

<section id="sec21">
<title>Part 3: Sinusoidal Tone Generator</title>

<para id="par22">
Add a sinusoidal tone generator to your main loop. The base frequency should be set by a front-panel control called "freq [Hz]", and the frequency multiplier and offset for each partial should be used to set the actual frequency. Also include a front-panel control to select the system sampling frequency "fs [Hz]".</para>

<para id="par23">Apply the amplitude envelope, and then add the partial to the sound that was generated on the previous pass of the loop. Regardless of whether you use a shift register or a feedback node, initialize the audio signal with an array of zeros which is of the same length as your envelopes.</para>

<para id="par24">Remember to use the "QuickScale" built-in subVI on the finished audio waveform to ensure that all of its values lie in the range +/- 1.
</para>

</section>

<section id="sec25">
<title>Part 4: Experiment with Parameters</title>

<para id="par26">
Your front panel controls should include the following adjustable parameters: number of partials, total duration, base frequency, sampling frequency, and attack time. Listen to the audio and view the spectrogram as you adjust the parameters.</para>

<para id="par27">To get started, listen to the sound with the first partial only, and then with the first two partials, and so on until you hear all eleven partials. Building up the sound from silence by adding more and more partials is the essence of "additive synthesis."</para>

<para id="par28">Try varying the attack time. What is the maximum attack time that still sounds like the striking of a bell?</para>

<para id="par29">Try adjusting the total duration and base frequency. Remember to adjust the sampling frequency high enough so that you do not produce aliasing. If the sampling frequency is too high, however, all of the partials will compress into the bottom of the spectrogram plot.</para>

<para id="par30">Overall, what values produce a realistic-sounding bell? </para>

<para id="par31">Create .wav files for three distinct sets of parameters, and discuss the motivation for your choices. Include a spectrogram plot for each of the three bell sounds.
</para>

</section>

</content>
</document>