<!--title = {mini-project} Spectrogram Art
-->

<?xml version='1.0' standalone='yes' ?>
<LVData>
<Version>8.2</Version>

<!-------------------------------------------------------->
<String> <Name>sec</Name> <Val>Objective</Val> </String>

<String> <Name>para</Name> <Val>
Additive synthesis builds up complex sounds from simple sounds (sinusoids). Additive synthesis implies more than just doing Fourier series, though: each sinusoidal component is assigned its own frequency and amplitude trajectory (resulting in a partial), so complex, time-varying sounds can be generated by summing these partials together.

In this project you will create an oscillator whose output tracks a specified amplitude and frequency trajectory. With this general-purpose oscillator you can define multiple frequency/amplitude trajectories that can be combined to create complex sounds. In particular, you will design the sound so that its spectrogram makes a recognizable picture! 
</Val> </String>



<String> <Name>secend</Name> <Val></Val> </String>
<!-------------------------------------------------------->
<String> <Name>sec</Name> <Val>Prerequisite Modules</Val> </String>

<String> <Name>para</Name> <Val>
If you have not done so already, please study the pre-requisite modules 
{cnxn document=&quot;m????&quot;}Additive Synthesis Concepts{/cnxn} and
{cnxn document=&quot;m????&quot;}Additive Synthesis Techniques{/cnxn}.
If you are relatively new to LabVIEW, consider taking the course {cnxn document=&quot;col10440&quot;}LabVIEW Techniques for Audio Signal Processing{/cnxn}  which provides all of the foundation you need in order to complete this mini-project activity, including working with arrays, creating subVIs, playing an array to the soundcard, and saving an array as a .wav sound file.
</Val> </String>

<String> <Name>secend</Name> <Val></Val> </String>
<!-------------------------------------------------------->
<String> <Name>sec</Name> <Val>Deliverables</Val> </String>

<Cluster> <Name>list</Name> <NumElts>3</NumElts>
<EW>
<Name>type</Name>
<Choice>Bulleted</Choice>
<Choice>Enumerated</Choice>
<Val>0</Val>
</EW>
<String> <Name>list name (optional)</Name> <Val></Val> </String>
<Array> <Name>list items</Name> <Dimsize>4</Dimsize>
<String> <Name>String</Name> <Val>All LabVIEW code that you develop (block diagrams and front panels)</Val> </String>
<String> <Name>String</Name> <Val>All generated sounds in .wav format</Val> </String>
<String> <Name>String</Name> <Val>Any plots or diagrams requested</Val> </String>
<String> <Name>String</Name> <Val>Summary write-up of your results</Val> </String>
</Array>
</Cluster>


<String> <Name>secend</Name> <Val></Val> </String>
<!-------------------------------------------------------->
<String> <Name>sec</Name> <Val>Part 1: General-Purpose Sinusoidal Oscillator</Val> </String>

<String> <Name>para</Name> <Val>
Develop a subVI called {term}gposc.vi{/term} that accepts a frequency trajectory (in Hz), an amplitude trajectory, and sampling frequency (in Hz) to produce a sinusoidal output whose amplitude and frequency tracks the two input trajectories, respectively. The two trajectories are arrays that should be of the same length.

Demonstrate that your oscillator works properly by showing the output of your VI (spectrogram and .wav file) for the amplitude and frequency trajectories produced by a MathScript node that contains the following code:
</Val> </String>

<String> <Name>code</Name>
ff=[linspace(200,1600,2.5*fs) ...
   linspace(1600,800,1.5*fs)];

aa=[linspace(1,0,3*fs) ...
   linspace(0,0.75,fs)];<Val></Val>
</String>

<String> <Name>para</Name> <Val>
where {code type=&apos;inline&apos;}fs{/code} is the sampling frequency in Hz, {code type=&apos;inline&apos;}ff{/code} is the output frequency trajectory (also in Hz), and {code type=&apos;inline&apos;}aa{/code} is the amplitude trajectory (between 0 and 1). Use a sampling frequency of 5 kHz when you make the spectrogram and soundfile.

Plot the trajectories {code type=&quot;inline&quot;}ff{/code} and {code type=&quot;inline&quot;}aa{/code} and compare to your spectrogram.

Remember, the instantaneous frequency of your general-purpose sinusoidal oscillator is related to the time-varying phase of the sine function. That is, if the sinusoidal signal is defined as
{m:math display=&apos;block&apos;}
 {m:semantics}
  {m:mrow}
   {m:mi}y{/m:mi}{m:mo stretchy=&apos;false&apos;}({/m:mo}{m:mi}t{/m:mi}{m:mo stretchy=&apos;false&apos;}){/m:mo}{m:mo}={/m:mo}{m:mi}sin{/m:mi}{m:mo}&amp;#x2061;{/m:mo}{m:mo stretchy=&apos;false&apos;}({/m:mo}{m:mi}&amp;#x03B8;{/m:mi}{m:mo stretchy=&apos;false&apos;}({/m:mo}{m:mi}t{/m:mi}{m:mo stretchy=&apos;false&apos;}){/m:mo}{m:mo stretchy=&apos;false&apos;}){/m:mo}
  {/m:mrow}
 {m:annotation encoding=&apos;MathType-MTEF&apos;}
 {/m:annotation}
 {/m:semantics}
 {/m:math},
 then the instantaneous frequency of the sinusoid is
{m:math display=&apos;block&apos;}
 {m:semantics}
  {m:mrow}
   {m:mi}&amp;#x03C9;{/m:mi}{m:mo stretchy=&apos;false&apos;}({/m:mo}{m:mi}t{/m:mi}{m:mo stretchy=&apos;false&apos;}){/m:mo}{m:mo}={/m:mo}{m:mrow}{m:mrow}
    {m:mi}d{/m:mi}{m:mi}&amp;#x03B8;{/m:mi}{m:mo stretchy=&apos;false&apos;}({/m:mo}{m:mi}t{/m:mi}{m:mo stretchy=&apos;false&apos;}){/m:mo}
   {/m:mrow}{m:mo}/{/m:mo}{m:mrow}
    {m:mi}d{/m:mi}{m:mi}t{/m:mi}
   {/m:mrow}{/m:mrow}
   
  {/m:mrow}
 {m:annotation encoding=&apos;MathType-MTEF&apos;}
 {/m:annotation}
 {/m:semantics}
{/m:math}
radians per second. Since you are given a frequency trajectory that relates to
{m:math display=&apos;block&apos;}
 {m:semantics}
  {m:mrow}
   {m:mi}&amp;#x03C9;{/m:mi}{m:mo stretchy=&apos;false&apos;}({/m:mo}{m:mi}t{/m:mi}{m:mo stretchy=&apos;false&apos;}){/m:mo}
  {/m:mrow}
 {m:annotation encoding=&apos;MathType-MTEF&apos;}
 {/m:annotation}
 {/m:semantics}
 {/m:math}, what mathematical operation will provide you with the phase function
{m:math display=&apos;block&apos;}
 {m:semantics}
  {m:mrow}
   {m:mi}&amp;#x03B8;{/m:mi}{m:mo stretchy=&apos;false&apos;}({/m:mo}{m:mi}t{/m:mi}{m:mo stretchy=&apos;false&apos;}){/m:mo}
  {/m:mrow}
 {m:annotation encoding=&apos;MathType-MTEF&apos;}
 {/m:annotation}
 {/m:semantics}
{/m:math}?

Here&apos;s a LabVIEW coding tip: You will find the built-in VI  &quot;Mathematics | Integ and Diff | Integral x(t)&quot; to be essential for this part of the project.
</Val> </String>



<String> <Name>secend</Name> <Val></Val> </String>
<!-------------------------------------------------------->
<String> <Name>sec</Name> <Val>Part 2: Frequency Trajectory Design</Val> </String>

<String> <Name>para</Name> <Val>
You can make your spectrogram art project sound more musically appealing when you design the frequency trajectories to account for frequency {emphasis}perception{/emphasis}; refer to [INSERT LINK] for a detailed treatment of this subject. You will design your trajectories in &quot;log space&quot; (using logarithmic graph paper) and then convert to actual frequency just before invoking your general-purpose sinusoidal oscillator.

Review {cnxn document=&quot;???&quot;}Additive Synthesis Techniques{/cnxn} to learn how to create your frequency trajectories for this part of the project.
</Val> </String>




<String> <Name>secend</Name> <Val></Val> </String>
<!-------------------------------------------------------->
<String> <Name>sec</Name> <Val>Part 3: Amplitude Trajectory Design</Val> </String>

<String> <Name>para</Name> <Val>
		The discussion of Part 2 pertains to the design of your amplitude trajectories, as well. Perception of intensity (loudness) is also logarithmic (refer to [INSERT LINK] and review the section on intensity perception). In this part you will design your amplitude trajectory in &quot;log space,&quot; but now using traditional decibels (dB). An intensity trajectory can be converted to amplitude by &quot;undoing&quot; the equation that relates a value to the same value expressed in decibels:
{m:math}
 {m:semantics}
  {m:mrow}
   {m:msub}
    {m:mi}X{/m:mi}
    {m:mrow}
     {m:mtext}dB{/m:mtext}
    {/m:mrow}
   {/m:msub}
   {m:mo}={/m:mo}{m:mn}20{/m:mn}{m:msub}
    {m:mrow}
     {m:mi}log{/m:mi}{m:mo}&amp;#x2061;{/m:mo}
    {/m:mrow}
    {m:mrow}
     {m:mn}10{/m:mn}
    {/m:mrow}
   {/m:msub}
   {m:mo stretchy=&apos;false&apos;}({/m:mo}{m:mi}X{/m:mi}{m:mo stretchy=&apos;false&apos;}){/m:mo}
  {/m:mrow}
 {m:annotation encoding=&apos;MathType-MTEF&apos;}
 {/m:annotation}
 {/m:semantics}
{/m:math}.

Experiment with your spectrogram display device to learn the intensity-to-color mapping. Specifically, you could produce a sinusoidal signal with increasing intensity values over time, then match up the plotted colors to the known intensity values.
</Val> </String>


<String> <Name>secend</Name> <Val></Val> </String>
<!-------------------------------------------------------->
<String> <Name>sec</Name> <Val>Part 4: Spectrogram Art</Val> </String>

<String> <Name>para</Name> <Val>
Design a spectrogram picture using multiple frequency/amplitude trajectories. Include your paper-and-pencil drawing of the spectrogram as part of your deliverables. Use your creativity to make an interesting and recognizable picture!

Better designs will go beyond straight lines to include curved lines such as arcs, exponentials, parabolas, sinusoids, polynomials, spline interpolations, and so on.

Include a .wav file of the sound associated with your spectrogram picture.
</Val> </String>


<String> <Name>secend</Name> <Val></Val> </String>
<!-------------------------------------------------------->
</LVData>
